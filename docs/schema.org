#+TITLE: Database Schema
#+AUTHOR: siiky
#+LANGUAGE: en

This document describes the used database schema in detail.

* Terminology/Notation

The schema is described in a relational calculus (though not in the sense of
"relational database"). "Entities", or "types", are written in PascalCase
(=Entry=, =Node=); functions are written in camelCase (~hasCID~, ~consumed~),
and always represent total functions (partial functions in this document will be
considered relations that are not functions); and relations that are not
functions are written in PascalCase as well (~Pinned~).

* Overview

The following graph describes the connections between the entities and their
attributes/relations. From it, one should be able to start guessing how to query
the database.

[[file:schema.png][Database Schema Graph]]

It doesn't encode multiplicity constraints. Those will be defined afterwards.

=Entry= corresponds to the videos/documents/etc catalogued in the DB. =Node=
corresponds to the various nodes running and participating in the network.

* Multiplicities

These are the relations of the entries:

+ =ofType : Type <- Entry= :: A surjective function, but not injective. Represents the type of the entry; that is, whether it is a video, a document, podcast, &c.
+ =isNamed : Name <- Entry= :: A surjective function, but not injective. Represents the name of the entry. This could be the title of the video, book, podcast episode, &c.
+ =consumed : Bool <- Entry= :: A surjective function, but not injective. Represents whether the entry has been consumed already or not.
+ =HasURL : URL <- Entry= :: An injective relation. The URL of the entry, e.g. the "official" source.
+ =hasCID : CID <- Entry= :: A bijection. The CID of the entry on IPFS.

And these are the relations of the nodes:

+ =identifiedBy : ID <- Node= :: A bijection. This could be for example the PeerID of the IPFS node.
+ =Pinned : CID <- Node= :: Neither injective nor surjective. Relates each node with its pinned CIDs.

* SQL Schema

For the SQL schema take a look at the [[file:../schema.sql]].

* TODO Questions
** TODO Types
Should types be a predefined set, or user-defined? User-defined is the ideal.

Should they be manually created, or programmatically created? Programmatically
created is the ideal.
** TODO URL
Does it make sense for a single entry to have more than one URL? It could maybe
be used to specify several sources/related pages (e.g. YT, official website,
Wikipedia, &c).

Is it worth it? How much more complex would the model become?
** TODO CID
How to model the temporary lack of a CID? Have an =EntriesToDownload= table?
